<?php

use Vanella\Core\Database;
use Vanella\Handlers\Helpers;
use Vanella\Handlers\Restful;

/**
 * This is a basic sample of creating your own
 * endpoint group for a specific table in your database.
 *
 * IMPORTANT THINGS TO REMEMBER
 *  - Create, Read, Update, and Delete api calls are
 *    already done for you.
 *  - We are only using GET and POST methods.
 *  - You can make your own api endpoint below.
 *  - You can even use native php MySQL or PDO class
 *    for working with the database.
 *  - There are no tricks in here. Just native php.
 *    You can also add your own php classes in the classes/Custom directory.
 *
 * RULES THAT YOU MUST FOLLOW!
 *
 *  - First letter of the class name must be in UPPERCASE.
 *   The rest of the letters are in lowercase i.e (Users, Bookings, Payments)
 *  - Class name must be the same with the file name i.e. (Users.php ==> class Users {})
 *  - Put all the classes for your api endpoints here please otherwise this won't work.
 */
class Users extends Restful
{
    // Explicitly put the database table name in here.
    protected $tableName = "users";

    /**
     * Just copy paste the constructor function down below.
     */
    public function __construct($args = [])
    {
        // This one is very important.
        $this->childClass = $this;

        // This is very important too.
        parent::__construct($args);
    }

    /**
     * This is a basic api creation of api endpoint.
     * We are using custom built in Database class
     * for working with the database. This is much
     * similar to Codeigniter's ActiveRecord, Laravel's Eloquent,
     * Yii2's ORM but this is the spaghettier version :)
     * But you can get used to this since
     * this Database class only uses built in PHP PDO class
     * for communicating with the database.
     * You can refer to Handlers\Restful in the Handler's
     * directory for reference. But if you don't want,
     * you can create your own custom database in
     * classes/Custom directory.
     *
     */
    public function customApiEndpoint()
    {
        try {

            $result = null;
            $success = false;
            $message = null;

            if ($_SERVER['REQUEST_METHOD'] == 'GET') {

                $db = new Database(
                    $this->dbConfig['host'],
                    $this->dbConfig['username'],
                    $this->dbConfig['password'],
                    $this->dbConfig['dbname']
                );

                // Get the results in an array form
                $result = $db->select($this->tableName)->all();
                $success = true;
                $message = 'Successfull record retrieval!';

            } else {
                $message = 'Only GET methods are allowed';
                $response_code = 405; // Method not allowed
            }

            // Display result as Json
            Helpers::renderAsJson([
                'data' => $result,
                'success' => $success,
                'message' => $message,
            ],
                $response_code,
                $_SERVER['REQUEST_METHOD']);

        } catch (\Exception $e) {

            // Display error message as Json
            Helpers::renderAsJson([
                'success' => false,
                'message' => $e->getMessage(),
            ],
                $response_code,
                $_SERVER['REQUEST_METHOD']);
        }
    }

}
